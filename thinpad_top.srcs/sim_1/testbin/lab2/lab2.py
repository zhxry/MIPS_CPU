#=# oj.run_time.max = 40000

from TestcaseBase import *
import random
import traceback
import enum
import time
import struct
import binascii
import os
from timeit import default_timer as timer

class Ins(enum.Flag):
    ADD = enum.auto()
    ADDI = enum.auto()
    SUB = enum.auto()
    SLT = enum.auto()

    SLLV = enum.auto()
    SRAV = enum.auto()
    SRA = enum.auto()
    SRLV = enum.auto()

    JALR = enum.auto()
    BGEZ = enum.auto()
    BLEZ = enum.auto()
    BLTZ = enum.auto()

class Testcase(TestcaseBase):
    class State(enum.Enum):
        Fib = 1
        Random = 2

    fibInfo = b'Fib Finish.'
    feedInfo = b'All PASS!'
    recvBuf = b''
    score = 0
    selection = 0
    result = 0x55555555
    rnd = random.getrandbits(32)

    def check(self):
        fib_correct = struct.unpack('<'+'I'*64, MEM_ANSWER)
        fib_result = struct.unpack('<'+'I'*64, ExtRAM[:0x100:False])
        addr = errors = 0
        for ret, ans in zip(fib_result, fib_correct):
            if ret != ans:
                self.log(f'ExtRAM[0x{addr:03x}] should be 0x{ans:08x}, get 0x{ret:08x}')
                errors += 1
            addr += 4
        if errors == 0:
            self.score += 0.3
            self.log('Fib Pass!')
        else:
            self.log('Fib Fail!')

        rdata = struct.unpack('<III', ExtRAM[0x100: 0x100+3*4: False])
        self.log("RandomTest Results: " + " ".join([hex(v) for v in rdata]))
        if rdata[1] != self.selection or rdata[2] != self.rnd:
            self.log('RandomTest Fail, Values have been accidentally changed.')
        elif rdata[0] == self.result:
            self.log('RandomTest Fail, Test program hasn\'t been executed.')
        else:
            self.result = rdata[0] ^ self.rnd
            if self.result >> 16 != 0xfeed or self.result & 0xffff != self.selection:
                self.log(f'RandomTest Fail, Invalid result code: {self.result:#08x}')
            else:
                self.log('RandomTest Pass!')
                self.score += 0.4

    def endTest(self):
        self.finish(self.score)
        return True

    def stateChange(self, received: bytes):
        if self.state == self.State.Fib:
            self.log(f"Fib info: {str(self.recvBuf)[1:]}")
            if received != self.fibInfo:
                self.log('ERROR: Fib incorrect info')
                return self.endTest()
            elif len(self.recvBuf) > len(self.fibInfo):
                self.log('WARNING: Fib extra bytes received')

            self.state = self.State.Random
            self.recvBuf = b''
            self.expectedLen = len(self.feedInfo)
            Serial << b'T'

        elif self.state == self.State.Random:
            self.log(f"RandomTest info: {str(self.recvBuf)[1:]}")
            if received != self.feedInfo:
                self.log('ERROR: RandomTest incorrect info')
                return self.endTest()
            elif len(self.recvBuf) > len(self.feedInfo):
                self.log('WARNING: RandomTest extra bytes received')

            self.score = 0.3
            self.check()
            return self.endTest()

    @Serial  # On receiving from serial port
    def recv(self, dataBytes):
        self.recvBuf += dataBytes
        while len(self.recvBuf) >= self.expectedLen:
            end = self.stateChange(self.recvBuf[:self.expectedLen])
            if end:
                break

    @Timer
    def timeout(self):
        self.log(f"ERROR: timeout during {self.state.name}")
        self.endTest()

    @started
    def initialize(self):
        user = USERNAME.split("-")
        if user[0] != "2024" and USERNAME != "root":
            self.log('This test isn\'t for you.')
            return self.endTest()
        if USERNAME != "root":
            for i in RandomTest_TABLE[user[2]]:
                self.selection |= i.value
        else:
            self.selection = 0xfff

        self.state = self.State.Fib
        self.expectedLen = len(self.fibInfo)
        self.log(f"Arguments: {hex(self.result)} {hex(self.selection)} {hex(self.rnd)}")
        DIP << 0
        +Reset
        BaseRAM[:] = MEM_RAND_INIT
        ExtRAM[:] = MEM_RAND_INIT
        BaseRAM[::True] = TEST_PROGRAM
        ExtRAM[0x100::True] = struct.pack('<III', self.result, self.selection, self.rnd)
        Serial.open(1, baud=9600)
        -Reset
        Timer.oneshot(30000)  # timeout in 30 seconds


# compiled test program
TEST_PROGRAM = binascii.unhexlify(
    '07000010000000344669622046696e6973682e00416c6c205041535321000000'
    '01000834010009344080043c00018c24215009010000283500004935000089ac'
    '00008b8c1b032b150000003404008424f7ff8c14000000340080103c08001026'
    '00000482d0bf113c01001026fc03288201000831fdff001100000034f80324a2'
    '00000482f8ff801400000034fc03288202000831fdff001100000034f8032482'
    '54000834f9ff8814000000344080103c00011036000011240400128e0800138e'
    '010048322100001100000034cdbc083cc85408352c0a093c143b2935f9c6033c'
    'dc8f6334201009011800431400000034f095083cb0c7083500000924f095033c'
    'b0c7633420100901100043140000003400000824706e093c701f2935706e033c'
    '701f633420100901080043140000003400000824000009240000032420100901'
    '020043140000003401003136020048321a00001100000034bfbc083ce0db0835'
    'bfbc033ca0d26334c0f6022113004314000000343bd3083ceb0108353bd3033c'
    'eb016334000002210c00431400000034000008240c3e03240c3e022107004314'
    '0000003400000824000003240000022102004314000000340200313604004832'
    '21000011000000346308083c94540835b59e093c6c1e2935ae69033c28366334'
    '221009011800431400000034bd93083ca845083500000924bd93033ca8456334'
    '22100901100043140000003400000824e5d2093c394c29351a2d033cc7b36334'
    '2210090108004314000000340000082400000924000003242210090102004314'
    '0000003404003136080048321e00001100000034ea77083cd88208353d27093c'
    '80a02935000003242a10090116004314000000341e5d083c94b4083500000924'
    '000003242a1009010f0043140000003400000824aa1e093ce3c5293501000324'
    '2a10090108004314000000340000082400000924000003242a10090102004314'
    '0000003408003136100048321d00001100000034961b083cc39008351b000924'
    '0018033c0410280116004314000000349f99083c40f10835000009249f99033c'
    '40f16334041028010e0043140000003400000824010009240000032404102801'
    '0800431400000034000008240000092400000324041028010200431400000034'
    '10003136200048321e00001100000034badb083cb0d0083505000924ddfe033c'
    '85d66334071028011600431400000034240b083c60d5083500000924240b033c'
    '60d56334071028010e0043140000003400000824120009240000032407102801'
    '0800431400000034000008240000092400000324071028010200431400000034'
    '20003136400048321900001100000034bfb3083cf87e0835fbff032403170800'
    '1300431400000034797f083c197f0835797f033c197f6334031008000c004314'
    '0000003400000824000003248315080007004314000000340000082400000324'
    '03100800020043140000003440003136800048321e00001100000034e5cf083c'
    '574c0835060009243f03033c31956334061028011600431400000034f916083c'
    'd8a9083500000924f916033cd8a96334061028010e0043140000003400000824'
    '0c00092400000324061028010800431400000034000008240000092400000324'
    '0610280102004314000000348000313600014832a20000110000003421b81f00'
    '00000224000003240080083ce00408250080093c0c0529250800001000000034'
    '2120e0036b6e023c2a36423409f8200100000034080000100000003409f80001'
    '0000003404000010000000342128e0030b24033c26af633421f817006b6e153c'
    '2a36b5360b24163c26afd636840055140000003482007614000000340080153c'
    'f404b5260080163c0405d6267c009614000000347a00b5140000003421b81f00'
    '00000224000003240080083c800508250080093cac0529250800001000000034'
    '2120e0030f5d023cc0cb423409f8200100000034080000100000003409f80001'
    '0000003404000010000000342128e003a3db033c64ac633421f817000f5d153c'
    'c0cbb536a3db163c64acd6365c005514000000345a007614000000340080153c'
    '9405b5260080163ca405d62654009614000000345200b5140000003421b81f00'
    '00000224000003240080083c200608250080093c4c0629250800001000000034'
    '2120e00332a8023c00bb423409f8200100000034080000100000003409f80001'
    '0000003404000010000000342128e0033ff4033c20a6633421f8170032a8153c'
    '00bbb5363ff4163c20a6d636340055140000003432007614000000340080153c'
    '3406b5260080163c4406d6262c009614000000342a00b5140000003421b81f00'
    '00000224000003240080083cc00608250080093cec0629250800001000000034'
    '2120e0032a1e023ccaa5423409f8200100000034080000100000003409f80001'
    '0000003404000010000000342128e0038247033c22fd633421f817002a1e153c'
    'caa5b5368247163c22fdd6360c005514000000340a007614000000340080153c'
    'd406b5260080163ce406d62604009614000000340200b5140000003400013136'
    '000248326f0000110000003400000224000003240800001000000034151b023c'
    '5e1f42340b000105000000340b000010000000340000003400bb083c0a130835'
    'f6ff010500000034040000100000003400000034690e033cba29633400001524'
    '0000162457005514000000345500761400000034000002240000032408000010'
    '000000342040023c52bf42340b000105000000340b0000100000003400000034'
    'f244083cf4bf0835f6ff010500000034040000100000003400000034fb4e033c'
    'd30663342040153c52bfb536fb4e163cd306d6363b0055140000003439007614'
    '000000340000022400000324080000100000003421ab023c885842340b000105'
    '000000340b0000100000003400000034bd12083c28800835f6ff010500000034'
    '040000100000003400000034ac55033c78a6633421ab153c8858b536ac55163c'
    '78a6d6361f005514000000341d00761400000034000002240000032408000010'
    '00000034131f023c009942340a000105000000340a0000100000003400000034'
    '00000824f7ff01050000003404000010000000340000003465af033cc4316334'
    '131f153c0099b53665af163cc431d63604005514000000340200761400000034'
    '00023136000448326f0000110000003400000224000003240800001000000034'
    'd06a023cb8a042340b000019000000340b0000100000003400000034b995083c'
    '6f200835f6ff001900000034040000100000003400000034088f033c03db6334'
    'd06a153cb8a0b536088f163c03dbd63655005514000000345300761400000034'
    '0000022400000324080000100000003482c7023c006242340b00001900000034'
    '0b0000100000003400000034092c083c44b00835f6ff00190000003404000010'
    '0000003400000034ea13033c6227633400001524000016243b00551400000034'
    '39007614000000340000022400000324080000100000003486ea023c007f4234'
    '0b000019000000340b0000100000003400000034b5da083cac620835f6ff0019'
    '00000034040000100000003400000034766d033ce550633486ea153c007fb536'
    '766d163ce550d6361f005514000000341d007614000000340000022400000324'
    '080000100000003497bb023ca03442340a000019000000340a00001000000034'
    '0000003400000824f7ff0019000000340400001000000034000000340aff033c'
    '84f0633497bb153ca034b5360aff163c84f0d636040055140000003402007614'
    '0000003400043136000848326500001100000034000002240000032407000010'
    '000000342f6a023c7c7d423409000005000000340900001000000034f9ff083c'
    '90020835f7ff000500000034030000100000003475c2033c82fd63342f6a153c'
    '7c7db53675c2163c82fdd6364d005514000000344b0076140000003400000224'
    '0000032407000010000000341a29023c74334234090000050000003409000010'
    '00000034ae35083c50810835f7ff0005000000340300001000000034d260033c'
    '1081633400001524000016243500551400000034330076140000003400000224'
    '0000032407000010000000347d5f023c5f6c4234080000050000003408000010'
    '0000003400000824f8ff00050000003403000010000000342c63033caa316334'
    '00001524000016241e005514000000341c007614000000340000022400000324'
    '07000010000000343818023cc29f423409000005000000340900001000000034'
    '96f5083c46950835f7ff000500000034030000100000003495eb033cc8426334'
    '3818153cc29fb53695eb163cc842d63604005514000000340200761400000034'
    '00083136edfe083c254011012640130100400800000008ae0e00321600000034'
    '0080103c1400102600000482d0bf113c01001026fc03288201000831fdff0011'
    '00000034f80324a200000482f8ff801400000034ffff001000000034'
)

# random data for ram init
MEM_RAND_INIT = os.urandom(4096)

# correct answer in ram
MEM_ANSWER = binascii.unhexlify(
    '020000000300000005000000080000000d000000150000002200000037000000'
    '5900000090000000e90000007901000062020000db0300003d060000180a0000'
    '551000006d1a0000c22a00002f450000f16f000020b500001125010031da0100'
    '42ff020073d90400b5d8070028b20c00dd8a1400053d2100e2c73500e7045700'
    'c9cc8c00b0d1e300799e700129705402a20ec503cb7e19066d8dde09380cf80f'
    'a599d619dda5ce29823fa5435fe5736de12419b1400a8d1e212fa6cf613933ee'
    '8268d9bde3a10cac650ae66948acf215adb6d87ff562cb95a219a415977c6fab'
    '399613c1d012836c09a9962dd9bb199ae264b0c7bb20ca619d857a2958a6448b'
)

RandomTest_TABLE = {
    "01": [Ins.SUB, Ins.SRA, Ins.BLTZ],
    "02": [Ins.SUB, Ins.SLLV, Ins.BGEZ],
    "03": [Ins.SUB, Ins.SLLV, Ins.JALR],
    "04": [Ins.SLT, Ins.SRA, Ins.BLEZ],
    "05": [Ins.SLT, Ins.SLLV, Ins.BLTZ],
    "06": [Ins.SUB, Ins.SRLV, Ins.JALR],
    "07": [Ins.SUB, Ins.SLLV, Ins.BLEZ],
    "08": [Ins.ADDI, Ins.SRA, Ins.JALR],
    "09": [Ins.ADDI, Ins.SLLV, Ins.BLTZ],
    "10": [Ins.ADDI, Ins.SRLV, Ins.BLEZ],
    "11": [Ins.SLT, Ins.SRA, Ins.BGEZ],
    "12": [Ins.ADDI, Ins.SRLV, Ins.JALR],
    "13": [Ins.ADD, Ins.SRAV, Ins.BGEZ],
    "14": [Ins.SUB, Ins.SRA, Ins.JALR],
    "15": [Ins.ADD, Ins.SRAV, Ins.BLTZ],
    "16": [Ins.SUB, Ins.SRAV, Ins.BLEZ],
    "17": [Ins.SLT, Ins.SRAV, Ins.BLEZ],
    "18": [Ins.SUB, Ins.SRAV, Ins.BLTZ],
    "19": [Ins.ADD, Ins.SRA, Ins.BLEZ],
    "20": [Ins.ADDI, Ins.SRAV, Ins.BLTZ],
    "21": [Ins.ADDI, Ins.SRAV, Ins.BGEZ],
    "22": [Ins.ADD, Ins.SRA, Ins.BLTZ],
    "23": [Ins.SUB, Ins.SRLV, Ins.BGEZ],
    "24": [Ins.SUB, Ins.SLLV, Ins.BLTZ],
    "25": [Ins.SUB, Ins.SRLV, Ins.BLEZ],
    "26": [Ins.ADD, Ins.SLLV, Ins.BLEZ],
    "27": [Ins.SLT, Ins.SRAV, Ins.BGEZ],
    "28": [Ins.SLT, Ins.SRAV, Ins.JALR],
    "29": [Ins.ADD, Ins.SRAV, Ins.BLEZ],
    "30": [Ins.ADD, Ins.SRLV, Ins.BGEZ],
    "31": [Ins.ADDI, Ins.SLLV, Ins.JALR],
    "32": [Ins.ADD, Ins.SLLV, Ins.BGEZ],
    "33": [Ins.ADDI, Ins.SRA, Ins.BLEZ],
    "34": [Ins.SLT, Ins.SRLV, Ins.BLTZ],
    "35": [Ins.SLT, Ins.SRLV, Ins.JALR],
    "36": [Ins.ADDI, Ins.SRAV, Ins.JALR],
    "37": [Ins.ADD, Ins.SLLV, Ins.JALR],
    "38": [Ins.SLT, Ins.SLLV, Ins.BGEZ],
    "39": [Ins.SUB, Ins.SRA, Ins.BGEZ],
    "40": [Ins.ADD, Ins.SRLV, Ins.BLEZ],
    "41": [Ins.SLT, Ins.SLLV, Ins.BLEZ],
    "42": [Ins.SLT, Ins.SRA, Ins.JALR],
    "43": [Ins.ADD, Ins.SRLV, Ins.JALR],
    "44": [Ins.SLT, Ins.SRAV, Ins.BLTZ],
    "45": [Ins.SLT, Ins.SRLV, Ins.BLEZ],
    "46": [Ins.ADDI, Ins.SLLV, Ins.BLEZ],
    "47": [Ins.ADD, Ins.SRLV, Ins.BLTZ],
    "48": [Ins.ADDI, Ins.SRAV, Ins.BLEZ],
    "49": [Ins.ADDI, Ins.SRLV, Ins.BGEZ],
    "50": [Ins.SLT, Ins.SRA, Ins.BLTZ],
    "51": [Ins.ADDI, Ins.SRA, Ins.BLTZ],
    "52": [Ins.ADD, Ins.SRA, Ins.JALR],
    "53": [Ins.SLT, Ins.SLLV, Ins.JALR],
    "54": [Ins.ADD, Ins.SLLV, Ins.BLTZ],
    "55": [Ins.ADDI, Ins.SLLV, Ins.BGEZ],
    "56": [Ins.SLT, Ins.SRLV, Ins.BGEZ],
    "57": [Ins.ADDI, Ins.SRLV, Ins.BLTZ],
    "58": [Ins.SUB, Ins.SRAV, Ins.JALR],
    "59": [Ins.SUB, Ins.SRA, Ins.BLEZ],
    "60": [Ins.ADD, Ins.SRAV, Ins.JALR],
    "61": [Ins.ADD, Ins.SRA, Ins.BGEZ],
    "62": [Ins.ADDI, Ins.SRA, Ins.BGEZ],
    "63": [Ins.SUB, Ins.SRAV, Ins.BGEZ],
    "64": [Ins.SUB, Ins.SRLV, Ins.BLTZ]
}